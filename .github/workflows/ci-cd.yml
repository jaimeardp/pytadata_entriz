name: CI/CD Pipeline

on:
  # Feature branches and develop - Quality checks only
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**', 'release/**' ]
  
  # Pull requests to develop and main
  pull_request:
    branches: [ develop, main ]
    types: [opened, synchronize, reopened, ready_for_review]

  
  # Production releases
  release:
    types: [published]
  
  # Manual workflow dispatch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ──────────────────────────────────────────────────────────
  # QUALITY GATE (all branches and PRs)
  # ──────────────────────────────────────────────────────────
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Cache dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction --with dev
        poetry install -E aws -E gcp
    
    - name: Code quality checks
      run: |
        echo "🔍 Running ruff linter..."
        poetry run ruff check . --output-format=github --show-fixes
        
        echo "🎨 Checking code formatting..."
        poetry run ruff format --check --diff .
        
        echo "🔒 Running security scan..."
        poetry run bandit -r src/ --format json --quiet || true
    
    - name: Type checking
      if: matrix.python-version == '3.11'
      run: |
        echo "🔍 Running type checks..."
        poetry run mypy src/pytadata_entriz --show-error-codes || true
    
    - name: Run tests
      run: |
        echo "🧪 Running test suite..."
        poetry run pytest
    
    
    outputs:
      quality-passed: ${{ steps.tests.outcome == 'success' }}

  # ──────────────────────────────────────────────────────────
  # BUILD & VALIDATE PACKAGE
  # ──────────────────────────────────────────────────────────
  build-package:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always() && needs.quality-gate.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Build package
      run: |
        echo "📦 Building package..."
        poetry build
        
        echo "📋 Package contents:"
        ls -la dist/
    
    - name: Validate package
      run: |
        echo "🔍 Validating package integrity..."
        pip install twine
        twine check dist/*
        
        echo "🧪 Testing package installation..."
        pip install dist/*.whl
        python -c "import pytadata_entriz; print('✅ Package imports successfully')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30

  # ──────────────────────────────────────────────────────────
  # DEPLOY TO TESTPYPI (develop branch)
  # ──────────────────────────────────────────────────────────
  deploy-test:
    name: Deploy to TestPyPI
    runs-on: ubuntu-latest
    needs: [quality-gate, build-package]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/develop' &&
      needs.quality-gate.result == 'success'
    environment: 
      name: test
      url: https://test.pypi.org/project/pytadata_entriz/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Generate development version
      run: |
        # Get base version and create development version
        BASE_VERSION=$(poetry version --short)
        DEV_VERSION="${BASE_VERSION}.dev${{ github.run_number }}"
        
        echo "📦 Development version: $DEV_VERSION"
        poetry version $DEV_VERSION
        echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV
    
    - name: Build development package
      run: poetry build
    
    - name: Deploy to TestPyPI
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi --skip-existing
    
    - name: Verify TestPyPI deployment
      run: |
        echo "⏳ Waiting for package propagation..."
        sleep 90
        
        echo "🔍 Testing installation from TestPyPI..."
        pip install -i https://test.pypi.org/simple/ --no-deps pytadata_entriz==${{ env.DEV_VERSION }}
        pip install pandas, pyarrow, typedframe
        
        echo "✅ Verifying package functionality..."
        python -c "import pytadata_entriz; print(f'✅ TestPyPI deployment verified!')"
    
    - name: Create deployment summary
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `## 🚀 TestPyPI Deployment Summary\n\n**Status:** ✅ Successfully deployed\n**Version:** \`${{ env.DEV_VERSION }}\`\n**Environment:** Test\n**Branch:** \`develop\`\n\n### 📥 Installation\n\`\`\`bash\npip install -i https://test.pypi.org/simple/ pytadata_entriz==${{ env.DEV_VERSION }}\n\`\`\`\n\n### 🧪 Quick Test\n\`\`\`python\nimport pytadata_entriz\nprint("Package loaded successfully!")\n\`\`\`\n\n### 🔗 Links\n- [TestPyPI Package](https://test.pypi.org/project/pytadata_entriz/${{ env.DEV_VERSION }}/)\n- [Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n---\n*🤖 Automated deployment from develop branch*`
          })

  # ──────────────────────────────────────────────────────────
  # STAGING DEPLOYMENT (main branch, pre-production)
  # ──────────────────────────────────────────────────────────
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gate, build-package]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.quality-gate.result == 'success'
    environment: 
      name: staging
      url: https://test.pypi.org/project/pytadata_entriz/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
    
    - name: Generate release candidate version
      run: |
        # Get base version and create RC version
        BASE_VERSION=$(poetry version --short)
        RC_VERSION="${BASE_VERSION}rc${{ github.run_number }}"
        
        echo "📦 Release candidate version: $RC_VERSION"
        poetry version $RC_VERSION
        echo "RC_VERSION=$RC_VERSION" >> $GITHUB_ENV
    
    - name: Build release candidate
      run: poetry build
    
    - name: Deploy to TestPyPI (staging)
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi --skip-existing
    
    - name: Run staging tests
      run: |
        echo "⏳ Waiting for staging package..."
        sleep 90
        
        echo "🔍 Installing release candidate..."
        pip install -i https://test.pypi.org/simple/  --no-deps pytadata_entriz==${{ env.RC_VERSION }}
        
        echo "🧪 Running staging validation..."
        python -c "import pytadata_entriz; print('✅ Staging validation passed!')"

  # ──────────────────────────────────────────────────────────
  # PRODUCTION DEPLOYMENT (GitHub releases only)
  # ──────────────────────────────────────────────────────────
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate, build-package]
    if: |
      github.event_name == 'release' && 
      github.event.action == 'published' &&
      needs.quality-gate.result == 'success'
    environment: 
      name: production
      url: https://pypi.org/project/pytadata_entriz/
    
    steps:
    - name: Checkout release
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Validate release version
      run: |
        POETRY_VERSION=$(poetry version --short)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        
        echo "📦 Poetry version: $POETRY_VERSION"
        echo "🏷️ Release tag: $TAG_VERSION"
        
        if [ "$POETRY_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch!"
          echo "pyproject.toml version: $POETRY_VERSION"
          echo "Git tag version: $TAG_VERSION"
          echo "Please ensure versions match before creating release."
          exit 1
        fi
        
        echo "✅ Version validation passed!"
        echo "RELEASE_VERSION=$POETRY_VERSION" >> $GITHUB_ENV
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
    
    - name: Final production build
      run: |
        echo "📦 Creating production build..."
        poetry build
        
        echo "🔍 Final package validation..."
        pip install twine
        twine check dist/*
    
    - name: Deploy to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Deploying to production PyPI..."
        poetry publish --skip-existing
    
    - name: Verify production deployment
      run: |
        echo "⏳ Waiting for PyPI propagation..."
        sleep 180
        
        echo "🔍 Verifying production deployment..."
        pip install pytadata_entriz==${{ env.RELEASE_VERSION }}
        python -c "import pytadata_entriz; print(f'✅ Production release ${{ env.RELEASE_VERSION }} verified!')"
    
    - name: Update release with deployment info
      uses: actions/github-script@v7
      with:
        script: |
          const release = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id
          });
          
          const deploymentInfo = `\n\n---\n\n## 📦 Installation\n\n\`\`\`bash\npip install pytadata_entriz==${{ env.RELEASE_VERSION }}\n\`\`\`\n\n## 🔗 Package Links\n\n- [PyPI Package](https://pypi.org/project/pytadata_entriz/${{ env.RELEASE_VERSION }}/)\n- [Documentation](https://github.com/${{ github.repository }})\n- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${{ env.RELEASE_VERSION }})\n\n## 📊 Deployment Details\n\n- **Version:** ${{ env.RELEASE_VERSION }}\n- **Build:** [${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n- **Deployed:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")\n- **Python:** ${{ env.PYTHON_VERSION }}+\n\n*🤖 Automatically deployed via GitHub Actions*`;
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: release.data.body + deploymentInfo
          });
    
    - name: Attach release artifacts
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*

  # ──────────────────────────────────────────────────────────
  # NOTIFICATION & CLEANUP
  # ──────────────────────────────────────────────────────────
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-test, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment summary
      run: |
        echo "## 📊 Deployment Summary"
        echo "- Test: ${{ needs.deploy-test.result || 'skipped' }}"
        echo "- Staging: ${{ needs.deploy-staging.result || 'skipped' }}"
        echo "- Production: ${{ needs.deploy-production.result || 'skipped' }}"